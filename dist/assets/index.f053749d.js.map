{"version":3,"file":"index.f053749d.js","sources":["../../vite/modulepreload-polyfill","../../main.js"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import './style.css';\nimport {Map, View} from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport TileWMS from 'ol/source/TileWMS';\nimport Draw from 'ol/interaction/Draw';\nimport VectorL from 'ol/layer/Vector';\nimport VectorS from 'ol/source/Vector';\nimport Overlay from 'ol/Overlay';\nimport button from 'ol-ext/control/Button'\nimport {register} from 'ol/proj/proj4';\nimport proj4 from 'proj4';\nimport MousePosition from 'ol/control/MousePosition'\nimport * as olCoordinate from 'ol/coordinate';\n\n\nproj4.defs(\n  'EPSG:27700',\n  '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 ' +\n    '+x_0=400000 +y_0=-100000 +ellps=airy ' +\n    '+towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 ' +\n    '+units=m +no_defs'\n);\nregister(proj4);\n\nconst container = document.getElementById('popup');\nconst content = document.getElementById('popup-content');\nconst closer = document.getElementById('popup-closer');\n\nconst overlay = new Overlay({\n  element: container,\n  autoPan: true,\n  autoPanAnimation: {\n    duration: 1500,\n  },\n});\n\n\n\n const baseMap =  new TileLayer({\n    source: new OSM(),\n  });\n\n  const burst = new TileLayer({\n    source: new TileWMS({\n      url: 'http://localhost:8080/geoserver/wms',\n      params: {'LAYERS': 'test:burst', 'TILED': true},\n      serverType: 'geoserver',\n      transition: 0,\n    }),\n  });\n  \n  \n\n  const test = new TileLayer({\n    source: new TileWMS({\n      url: 'http://localhost:8080/geoserver/wms',\n      params: {'LAYERS': 'test:test', 'TILED': true},\n      serverType: 'geoserver',\n      transition: 0,\n      \n    }),\n  });\n\n  const streetL = new TileLayer({\n    source: new TileWMS({\n      url: 'http://localhost:8080/geoserver/wms',\n      params: {'LAYERS': 'test:street_lighting', 'TILED': true},\n      serverType: 'geoserver',\n      transition: 0,\n      \n    }),\n  });\n\n\nlet mapView = new View({\n  center: [339861.7958798604, 100319.43155530083],\n  zoom: 10,\n  projection: 'EPSG:27700'\n  \n  \n});\n\n\n\n\n\nconst map = new Map({\n  target: 'map',\n  layers: [baseMap, streetL, test, burst],\n  view: mapView,\n  overlays: [overlay]\n});\n\n\n\n// const drawSource = new VectorS()\n\n// const drawLayer = new VectorL({\n//   source: drawSource\n// })\n\n\n// map.addLayer(drawLayer)\n\n// const draw = new Draw({\n//   type: 'Point',\n//   source: drawSource\n// })\n\n\n// map.addInteraction(draw)\n\n\n\nasync function SaveDatatodb(x, y) {\n  try {\n    const result = await fetch('http://localhost:8111/database', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n\n      body: JSON.stringify({\"col_1\": \"like fuckin\", \"geometry\": {\"type\": \"Point\", \"coordinates\": [x, y]}})\n\n    })\n    console.log(result)\n  }\n  catch (err) {\n    console.log(err)\n\n  } \n    \n}\n\n\n// draw.on('drawend', function(evt){\n//   //let clickedCoo = evt.feature.getGeometry().getArea()\n//   const coordinate = evt.feature.getGeometry().flatCoordinates;\n  \n//   map.getView().animate({zoom: 15, center:[540055.3264104014, 141854.6262954283]})\n  \n  \n//   console.log(coordinate)\n//   // SaveDatatodb(coordinate[0], coordinate[1])\n\n//   //content.innerHTML =   \n//   overlay.setPosition(coordinate);\n//  // console.log(clickedCoo)\n\n// })\n\n\n// add mouse position to application as easting and northing\nconst mousePosition = new MousePosition({\n  className: 'mousePosition',\n  projection: 'EPSG 27700',\n  coordinateFormat: coordinate => {\n    return olCoordinate.format(coordinate, '{x}, {y}')}\n});\nmap.addControl(mousePosition);\n\n\n//Add a custom push button with onToggle function\nvar hello = new button (\n    {\thtml: '<div class=\"btn-event\"></div>',\n      className: \"draw-btn\",\n      title: \"The button\",\n      handleClick: () =>\n        {\tconsole.log('hello!!!');\n        }\n    });\nmap.addControl(hello);\n\n\n// // The search control\n// var search = new Search(\n//   {\t//target: $(\".options\").get(0),\n//     // Title to use in the list\n//     className: \"search-btn\",\n//     getTitle: function(f) { return f.name; },\n//     // Search result\n    \n    \n//   });\n// map.addControl (search);\n\ncloser.onclick = () => {\n  overlay.setPosition(undefined);\n  closer.blur();\n  return false;\n};\n\n// get feature info as a Geojson\nmap.on('singleclick', (evt) => {\n  content.innerHTML = ''\n  overlay.setPosition(evt.coordinate);\n  const viewResolution = mapView.getResolution();\n  const url = streetL.getSource().getFeatureInfoUrl(\n    evt.coordinate,\n    viewResolution,\n    'EPSG:27700',\n    {'INFO_FORMAT': 'application/json'}\n  );\n  \n  if (url) {\n    fetch(url)\n      .then((response) => response.json())\n      .then((jsonResp) => {\n        content.innerHTML = `<h3><u>${jsonResp.features[0].id}</u></h3>`\n        let featuresProperties = jsonResp.features[0].properties\n        for (let key in featuresProperties) {\n          if (featuresProperties.hasOwnProperty(key) && key != 'OBJECTID') {\n              // console.log(key + \" -> \" + featuresProperties[key]);\n              content.innerHTML += `<p><strong>${key}: </strong>${featuresProperties[key]}</p>`\n          }\n      }\n        //document.getElementById('popup').innerHTML = JSON.stringify(featuresProperties);\n        console.log(JSON.stringify(jsonResp.features[0].id))\n        \n      })\n      .catch((err) => {\n      throw(err)});\n      \n  } else {\n    overlay.setPosition(undefined);\n  }\n});\n\n\n\n\n\n\n// map.on('singleclick', (evt) => {\n//   content.innerHTML = ''\n//   let resolution = mapView.getResolution();\n//   const url = streetL.getSource().getFeatureInfoUrl(evt.coordinate, resolution, 'EPSG: 27700', {\n//     'INFO_FORMAT' : 'application/json'\n  \n//   });\n//   console.log(viewResolution)\n\n\n  // if (ur) {\n  //   $.getJSON(url, function() {\n  //     let feature = data.features[0];\n  //     let props = feature.properties;\n  //     content.innerHTML = `<h3>RoadName : </h3> <p> ${props} </p>`\n  //     console.log(props)\n\n  //   })\n  // }\n//});\n\n\n"],"names":["olCoordinate.format","button"],"mappings":"0GAAA,KAAM,GAAI,UAAoB,CAC1B,KAAM,GAAU,SAAS,cAAc,QAAQ,QAC/C,GAAI,GAAW,EAAQ,UAAY,EAAQ,SAAS,iBAChD,OAEJ,SAAW,KAAQ,UAAS,iBAAiB,6BACzC,EAAe,GAEnB,GAAI,kBAAiB,AAAC,GAAc,CAChC,SAAW,KAAY,GACnB,GAAI,EAAS,OAAS,YAGtB,SAAW,KAAQ,GAAS,WACxB,AAAI,EAAK,UAAY,QAAU,EAAK,MAAQ,iBACxC,EAAe,KAG5B,QAAQ,SAAU,CAAE,UAAW,GAAM,QAAS,KACjD,WAAsB,EAAQ,CAC1B,KAAM,GAAY,GAClB,MAAI,GAAO,WACP,GAAU,UAAY,EAAO,WAC7B,EAAO,gBACP,GAAU,eAAiB,EAAO,gBACtC,AAAI,EAAO,cAAgB,kBACvB,EAAU,YAAc,UACvB,AAAI,EAAO,cAAgB,YAC5B,EAAU,YAAc,OAExB,EAAU,YAAc,cACrB,EAEX,WAAwB,EAAM,CAC1B,GAAI,EAAK,GAEL,OACJ,EAAK,GAAK,GAEV,KAAM,GAAY,EAAa,GAC/B,MAAM,EAAK,KAAM,KAEvB,AAAoB,IC1BtB,EAAM,KACJ,aACA,oKAKF,EAAS,GAET,KAAM,GAAY,SAAS,eAAe,SACpC,EAAU,SAAS,eAAe,iBAClC,EAAS,SAAS,eAAe,gBAEjC,EAAU,GAAI,GAAQ,CAC1B,QAAS,EACT,QAAS,GACT,iBAAkB,CAChB,SAAU,QAMP,EAAW,GAAI,GAAU,CAC5B,OAAQ,GAAI,KAGR,EAAQ,GAAI,GAAU,CAC1B,OAAQ,GAAI,GAAQ,CAClB,IAAK,sCACL,OAAQ,CAAC,OAAU,aAAc,MAAS,IAC1C,WAAY,YACZ,WAAY,MAMV,EAAO,GAAI,GAAU,CACzB,OAAQ,GAAI,GAAQ,CAClB,IAAK,sCACL,OAAQ,CAAC,OAAU,YAAa,MAAS,IACzC,WAAY,YACZ,WAAY,MAKV,EAAU,GAAI,GAAU,CAC5B,OAAQ,GAAI,GAAQ,CAClB,IAAK,sCACL,OAAQ,CAAC,OAAU,uBAAwB,MAAS,IACpD,WAAY,YACZ,WAAY,MAMlB,GAAI,GAAU,GAAI,GAAK,CACrB,OAAQ,CAAC,kBAAmB,oBAC5B,KAAM,GACN,WAAY,eASd,KAAM,GAAM,GAAI,GAAI,CAClB,OAAQ,MACR,OAAQ,CAAC,EAAS,EAAS,EAAM,GACjC,KAAM,EACN,SAAU,CAAC,KA+DP,EAAgB,GAAI,GAAc,CACtC,UAAW,gBACX,WAAY,aACZ,iBAAkB,GACTA,EAAoB,EAAY,cAE3C,EAAI,WAAW,GAIf,GAAI,GAAQ,GAAIC,GACZ,CAAE,KAAM,gCACN,UAAW,WACX,MAAO,aACP,YAAa,IACX,CAAE,QAAQ,IAAI,eAGtB,EAAI,WAAW,GAef,EAAO,QAAU,IACf,GAAQ,YAAY,QACpB,EAAO,OACA,IAIT,EAAI,GAAG,cAAe,AAAC,GAAQ,CAC7B,EAAQ,UAAY,GACpB,EAAQ,YAAY,EAAI,YACxB,KAAM,GAAiB,EAAQ,gBACzB,EAAM,EAAQ,YAAY,kBAC9B,EAAI,WACJ,EACA,aACA,CAAC,YAAe,qBAGlB,AAAI,EACF,MAAM,GACH,KAAK,AAAC,GAAa,EAAS,QAC5B,KAAK,AAAC,GAAa,CAClB,EAAQ,UAAY,UAAU,EAAS,SAAS,GAAG,cACnD,GAAI,GAAqB,EAAS,SAAS,GAAG,WAC9C,OAAS,KAAO,GACd,AAAI,EAAmB,eAAe,IAAQ,GAAO,YAEjD,GAAQ,WAAa,cAAc,eAAiB,EAAmB,UAI7E,QAAQ,IAAI,KAAK,UAAU,EAAS,SAAS,GAAG,OAGjD,MAAM,AAAC,GAAQ,CAChB,KAAM,KAGR,EAAQ,YAAY"}